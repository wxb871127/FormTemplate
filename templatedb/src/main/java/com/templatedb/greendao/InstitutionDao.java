package com.templatedb.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import template.com.templatedb.Institution;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Institution".
*/
public class InstitutionDao extends AbstractDao<Institution, Long> {

    public static final String TABLENAME = "Institution";

    /**
     * Properties of entity Institution.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Jgbh = new Property(1, String.class, "jgbh", false, "jgbh");
        public final static Property Jgmc = new Property(2, String.class, "jgmc", false, "jgmc");
        public final static Property Pym = new Property(3, String.class, "pym", false, "pym");
        public final static Property Stamp = new Property(4, String.class, "stamp", false, "stamp");
        public final static Property Zfbz = new Property(5, String.class, "zfbz", false, "zfbz");
        public final static Property Zzjgdm = new Property(6, String.class, "zzjgdm", false, "zzjgdm");
        public final static Property Yljgzzdm = new Property(7, String.class, "yljgzzdm", false, "yljgzzdm");
    }


    public InstitutionDao(DaoConfig config) {
        super(config);
    }
    
    public InstitutionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Institution\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"jgbh\" TEXT," + // 1: jgbh
                "\"jgmc\" TEXT," + // 2: jgmc
                "\"pym\" TEXT," + // 3: pym
                "\"stamp\" TEXT," + // 4: stamp
                "\"zfbz\" TEXT," + // 5: zfbz
                "\"zzjgdm\" TEXT," + // 6: zzjgdm
                "\"yljgzzdm\" TEXT);"); // 7: yljgzzdm
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_Institution_jgbh ON \"Institution\"" +
                " (\"jgbh\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Institution\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Institution entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String jgbh = entity.getJgbh();
        if (jgbh != null) {
            stmt.bindString(2, jgbh);
        }
 
        String jgmc = entity.getJgmc();
        if (jgmc != null) {
            stmt.bindString(3, jgmc);
        }
 
        String pym = entity.getPym();
        if (pym != null) {
            stmt.bindString(4, pym);
        }
 
        String stamp = entity.getStamp();
        if (stamp != null) {
            stmt.bindString(5, stamp);
        }
 
        String zfbz = entity.getZfbz();
        if (zfbz != null) {
            stmt.bindString(6, zfbz);
        }
 
        String zzjgdm = entity.getZzjgdm();
        if (zzjgdm != null) {
            stmt.bindString(7, zzjgdm);
        }
 
        String yljgzzdm = entity.getYljgzzdm();
        if (yljgzzdm != null) {
            stmt.bindString(8, yljgzzdm);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Institution entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String jgbh = entity.getJgbh();
        if (jgbh != null) {
            stmt.bindString(2, jgbh);
        }
 
        String jgmc = entity.getJgmc();
        if (jgmc != null) {
            stmt.bindString(3, jgmc);
        }
 
        String pym = entity.getPym();
        if (pym != null) {
            stmt.bindString(4, pym);
        }
 
        String stamp = entity.getStamp();
        if (stamp != null) {
            stmt.bindString(5, stamp);
        }
 
        String zfbz = entity.getZfbz();
        if (zfbz != null) {
            stmt.bindString(6, zfbz);
        }
 
        String zzjgdm = entity.getZzjgdm();
        if (zzjgdm != null) {
            stmt.bindString(7, zzjgdm);
        }
 
        String yljgzzdm = entity.getYljgzzdm();
        if (yljgzzdm != null) {
            stmt.bindString(8, yljgzzdm);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Institution readEntity(Cursor cursor, int offset) {
        Institution entity = new Institution( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // jgbh
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // jgmc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pym
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // stamp
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // zfbz
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // zzjgdm
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // yljgzzdm
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Institution entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setJgbh(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setJgmc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPym(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStamp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setZfbz(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setZzjgdm(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setYljgzzdm(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Institution entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Institution entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Institution entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
