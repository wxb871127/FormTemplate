package com.templatedb.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import template.com.templatedb.Drug;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Drug".
*/
public class DrugDao extends AbstractDao<Drug, Long> {

    public static final String TABLENAME = "Drug";

    /**
     * Properties of entity Drug.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PrimaryKey = new Property(0, Long.class, "primaryKey", true, "_id");
        public final static Property Ypid = new Property(1, String.class, "ypid", false, "ypid");
        public final static Property Ypmc = new Property(2, String.class, "ypmc", false, "ypmc");
        public final static Property Fyfs = new Property(3, String.class, "fyfs", false, "fyfs");
        public final static Property Ffcs = new Property(4, String.class, "ffcs", false, "ffcs");
        public final static Property Jl = new Property(5, String.class, "jl", false, "jl");
        public final static Property Bz = new Property(6, String.class, "bz", false, "bz");
        public final static Property Zfbz = new Property(7, String.class, "zfbz", false, "zfbz");
        public final static Property Pym = new Property(8, String.class, "pym", false, "pym");
        public final static Property Stamp = new Property(9, String.class, "stamp", false, "stamp");
        public final static Property Blfy = new Property(10, String.class, "blfy", false, "blfy");
        public final static Property Jbzl = new Property(11, String.class, "jbzl", false, "jbzl");
    }


    public DrugDao(DaoConfig config) {
        super(config);
    }
    
    public DrugDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Drug\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: primaryKey
                "\"ypid\" TEXT," + // 1: ypid
                "\"ypmc\" TEXT," + // 2: ypmc
                "\"fyfs\" TEXT," + // 3: fyfs
                "\"ffcs\" TEXT," + // 4: ffcs
                "\"jl\" TEXT," + // 5: jl
                "\"bz\" TEXT," + // 6: bz
                "\"zfbz\" TEXT," + // 7: zfbz
                "\"pym\" TEXT," + // 8: pym
                "\"stamp\" TEXT," + // 9: stamp
                "\"blfy\" TEXT," + // 10: blfy
                "\"jbzl\" TEXT);"); // 11: jbzl
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "DrugIndex ON \"Drug\"" +
                " (\"ypid\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Drug\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Drug entity) {
        stmt.clearBindings();
 
        Long primaryKey = entity.getPrimaryKey();
        if (primaryKey != null) {
            stmt.bindLong(1, primaryKey);
        }
 
        String ypid = entity.getYpid();
        if (ypid != null) {
            stmt.bindString(2, ypid);
        }
 
        String ypmc = entity.getYpmc();
        if (ypmc != null) {
            stmt.bindString(3, ypmc);
        }
 
        String fyfs = entity.getFyfs();
        if (fyfs != null) {
            stmt.bindString(4, fyfs);
        }
 
        String ffcs = entity.getFfcs();
        if (ffcs != null) {
            stmt.bindString(5, ffcs);
        }
 
        String jl = entity.getJl();
        if (jl != null) {
            stmt.bindString(6, jl);
        }
 
        String bz = entity.getBz();
        if (bz != null) {
            stmt.bindString(7, bz);
        }
 
        String zfbz = entity.getZfbz();
        if (zfbz != null) {
            stmt.bindString(8, zfbz);
        }
 
        String pym = entity.getPym();
        if (pym != null) {
            stmt.bindString(9, pym);
        }
 
        String stamp = entity.getStamp();
        if (stamp != null) {
            stmt.bindString(10, stamp);
        }
 
        String blfy = entity.getBlfy();
        if (blfy != null) {
            stmt.bindString(11, blfy);
        }
 
        String jbzl = entity.getJbzl();
        if (jbzl != null) {
            stmt.bindString(12, jbzl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Drug entity) {
        stmt.clearBindings();
 
        Long primaryKey = entity.getPrimaryKey();
        if (primaryKey != null) {
            stmt.bindLong(1, primaryKey);
        }
 
        String ypid = entity.getYpid();
        if (ypid != null) {
            stmt.bindString(2, ypid);
        }
 
        String ypmc = entity.getYpmc();
        if (ypmc != null) {
            stmt.bindString(3, ypmc);
        }
 
        String fyfs = entity.getFyfs();
        if (fyfs != null) {
            stmt.bindString(4, fyfs);
        }
 
        String ffcs = entity.getFfcs();
        if (ffcs != null) {
            stmt.bindString(5, ffcs);
        }
 
        String jl = entity.getJl();
        if (jl != null) {
            stmt.bindString(6, jl);
        }
 
        String bz = entity.getBz();
        if (bz != null) {
            stmt.bindString(7, bz);
        }
 
        String zfbz = entity.getZfbz();
        if (zfbz != null) {
            stmt.bindString(8, zfbz);
        }
 
        String pym = entity.getPym();
        if (pym != null) {
            stmt.bindString(9, pym);
        }
 
        String stamp = entity.getStamp();
        if (stamp != null) {
            stmt.bindString(10, stamp);
        }
 
        String blfy = entity.getBlfy();
        if (blfy != null) {
            stmt.bindString(11, blfy);
        }
 
        String jbzl = entity.getJbzl();
        if (jbzl != null) {
            stmt.bindString(12, jbzl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Drug readEntity(Cursor cursor, int offset) {
        Drug entity = new Drug( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // primaryKey
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ypid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ypmc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fyfs
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ffcs
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // jl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // bz
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // zfbz
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pym
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // stamp
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // blfy
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // jbzl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Drug entity, int offset) {
        entity.setPrimaryKey(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setYpid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setYpmc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFyfs(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFfcs(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setJl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBz(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setZfbz(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPym(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStamp(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBlfy(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setJbzl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Drug entity, long rowId) {
        entity.setPrimaryKey(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Drug entity) {
        if(entity != null) {
            return entity.getPrimaryKey();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Drug entity) {
        return entity.getPrimaryKey() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
