package com.templatedb.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import template.com.templatedb.Area;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Area".
*/
public class AreaDao extends AbstractDao<Area, Long> {

    public static final String TABLENAME = "Area";

    /**
     * Properties of entity Area.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PrimaryKey = new Property(0, Long.class, "primaryKey", true, "_id");
        public final static Property Qhbm = new Property(1, String.class, "qhbm", false, "qhbm");
        public final static Property Qhmc = new Property(2, String.class, "qhmc", false, "qhmc");
        public final static Property Qhqc = new Property(3, String.class, "qhqc", false, "qhqc");
        public final static Property Stamp = new Property(4, String.class, "stamp", false, "stamp");
        public final static Property Zfbz = new Property(5, String.class, "zfbz", false, "zfbz");
        public final static Property Pym = new Property(6, String.class, "pym", false, "pym");
    }


    public AreaDao(DaoConfig config) {
        super(config);
    }
    
    public AreaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Area\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: primaryKey
                "\"qhbm\" TEXT," + // 1: qhbm
                "\"qhmc\" TEXT," + // 2: qhmc
                "\"qhqc\" TEXT," + // 3: qhqc
                "\"stamp\" TEXT," + // 4: stamp
                "\"zfbz\" TEXT," + // 5: zfbz
                "\"pym\" TEXT);"); // 6: pym
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_Area_qhbm ON \"Area\"" +
                " (\"qhbm\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Area\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Area entity) {
        stmt.clearBindings();
 
        Long primaryKey = entity.getPrimaryKey();
        if (primaryKey != null) {
            stmt.bindLong(1, primaryKey);
        }
 
        String qhbm = entity.getQhbm();
        if (qhbm != null) {
            stmt.bindString(2, qhbm);
        }
 
        String qhmc = entity.getQhmc();
        if (qhmc != null) {
            stmt.bindString(3, qhmc);
        }
 
        String qhqc = entity.getQhqc();
        if (qhqc != null) {
            stmt.bindString(4, qhqc);
        }
 
        String stamp = entity.getStamp();
        if (stamp != null) {
            stmt.bindString(5, stamp);
        }
 
        String zfbz = entity.getZfbz();
        if (zfbz != null) {
            stmt.bindString(6, zfbz);
        }
 
        String pym = entity.getPym();
        if (pym != null) {
            stmt.bindString(7, pym);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Area entity) {
        stmt.clearBindings();
 
        Long primaryKey = entity.getPrimaryKey();
        if (primaryKey != null) {
            stmt.bindLong(1, primaryKey);
        }
 
        String qhbm = entity.getQhbm();
        if (qhbm != null) {
            stmt.bindString(2, qhbm);
        }
 
        String qhmc = entity.getQhmc();
        if (qhmc != null) {
            stmt.bindString(3, qhmc);
        }
 
        String qhqc = entity.getQhqc();
        if (qhqc != null) {
            stmt.bindString(4, qhqc);
        }
 
        String stamp = entity.getStamp();
        if (stamp != null) {
            stmt.bindString(5, stamp);
        }
 
        String zfbz = entity.getZfbz();
        if (zfbz != null) {
            stmt.bindString(6, zfbz);
        }
 
        String pym = entity.getPym();
        if (pym != null) {
            stmt.bindString(7, pym);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Area readEntity(Cursor cursor, int offset) {
        Area entity = new Area( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // primaryKey
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // qhbm
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // qhmc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // qhqc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // stamp
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // zfbz
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // pym
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Area entity, int offset) {
        entity.setPrimaryKey(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQhbm(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQhmc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQhqc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStamp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setZfbz(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPym(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Area entity, long rowId) {
        entity.setPrimaryKey(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Area entity) {
        if(entity != null) {
            return entity.getPrimaryKey();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Area entity) {
        return entity.getPrimaryKey() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
